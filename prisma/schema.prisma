// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  username         String         @unique
  passwordHash     String
  orders           Order[]
  comments         Comment[]
  ratings          Rating[]
  favoriteProducts FavoriteList[]
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: SetDefault)
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int      @default(1)
  productId String
  orderId   String
}

model Product {
  id          String         @id @default(uuid())
  name        String
  price       Float
  imgLink     String
  imgList     String[]
  brand       String         @default("")
  category    String         @default("")
  subCategory String         @default("")
  description String         @default("")
  comments    Comment[]
  orderItem   OrderItem[]
  ratings     Rating[]
  favoritedBy FavoriteList[]
}

model FavoriteList {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, productId])
}

model Rating {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  userId    String
  value     Float
}

model Comment {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  content   String
}
